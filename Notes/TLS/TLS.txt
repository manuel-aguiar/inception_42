# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    TLS.txt                                            :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: marvin <marvin@student.42.fr>              +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/10/21 08:56:16 by marvin            #+#    #+#              #
#    Updated: 2024/10/21 08:56:16 by marvin           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

https://learn.microsoft.com/en-us/windows/win32/secauthn/tls-handshake-protocol

TLS is built on top of the now deprecated SSL protocol
Most known use is for https (application layer) via port 443


TLS 1.0 appeared in 1999 (RFC 2246) as an upgrade to SSL 3.0

TLS 1.2 -> removal of backward compatibility with SSL 2.0
        -> introduction of SHA-256 as the encrypting algorithm (hence its implementation in nginx)

TLS 1.3




TLS cypher suit:
    TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256

THE ORDER MATTERS
    this means:
        TLS                                                 -> the protocol
        ECDHE (Elliptic Curve Diffie-Hellman Ephemeral)     -> used to generate a session key
        RSA                                                 -> authentication of the digital certificate
        AES_128_GCM                                         -> how the actual data in communication is transmitted
                    (Advanced Encryption Standard with 128-bit key in Galois/Counter Mode) -> good luck, buddy
        SHA256                                              -> to verify the integrity of messages


For an http connection, the following takes place:

    Client connects to server (ip port)

    TLS-Handshake:
            1) client sends ClientHello message, indicating:
                - TLS versions it can use (v1.2, v1.3 etc);
                - cyphers it can use:
                    - cyphers are the encryption algorithms it supports for communication, for instance:
                        - RSA (deprecated TLSv1.3 apart from authentication) -> Rivest-Shamir-Adleman (the mathmaticians)
                        - Elyptic Curve Criptography
            
                            "
                            ClientHello
                            Version: TLS 1.3
                            Cipher Suites: 
                                TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256                           //<- selected (below) by the server
                                TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
                                TLS_AES_128_GCM_SHA256
                            Random: <random value>
                            "

            2) server answers with ServerHello message:
                - sends its digital certificates
                - selects from the clients cypher suit the ones htat will be used for communication

                    "
                    ServerHello
                    Version: TLS 1.3
                    Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256                         //-> server selected this one
                    Random: <another random value>
                    "

            3) clients verifies that the certificate is valid (not expired, etc) and signed by a relevant Certificate Authority
                effectively verifying the server's identity
            
            4) Key exchange -> server and browser derive their session key from the shared secret generated by the
                pre-agreed cypher for data exchange (RSA - deprecated, Elyptic omgwhatisthis - more common today)
    
    Communication can take place, encrypted with the generated keys from the key exchange.


Communication:

    Clients encrypts message (http request with body, for instance) using AES (as per above, creates cyphertext). and generates a hash code
    for that message (the original, decrypted) using SHA256 (Hash-Based Message Authentication Code - HMAC). is based on SHA256 and a secret key
    known only to sender and receiver


    Server reads message, decrypt message with AES, coonverting it to the original. Then, computes the HMAC from the decrypted message.
    If Server HMAC equals that of the client, server knows the message was not tempered with (integrity check). Communication proceeds

    Server answers, encrypts message according to the AES (cyphertext), generates a HMAC of that message (decrypted) and sends the cypher text with the HMAC

    Client does the same as the server, decripts and compares hashes to verify the message integrity





Microsoft full story:



Establishing a Secure Session by Using TLS
The TLS Handshake Protocol involves the following steps:

1) The client sends a "Client hello" message to the server, along with the
    client's random value and supported cipher suites.
2) The server responds by sending a "Server hello" message to the client, 
    along with the server's random value.
3) The server sends its certificate to the client for authentication and 
    may request a certificate from the client. The server sends the "Server hello done" message.
4) If the server has requested a certificate from the client, the client s
    ends it.
5) The client creates a random Pre-Master Secret and encrypts it with the 
    public key from the server's certificate, sending the encrypted Pre-Master Secret to the server.
6) The server receives the Pre-Master Secret. The server and client each 
    generate the Master Secret and session keys based on the Pre-Master Secret.
7) The client sends "Change cipher spec" notification to server to indicate 
    that the client will start using the new session keys for hashing and encrypting messages. Client also sends "Client finished" message.
8) Server receives "Change cipher spec" and switches its record layer 
    security state to symmetric encryption using the session keys. Server sends "Server finished" message to the client.
9) Client and server can now exchange application data over the secured 
    channel they have established. All messages sent from client to server and from server to client are encrypted using session key.






